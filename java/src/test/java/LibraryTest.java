/*
 * This Java source file was generated by the Gradle 'init' task.
 */

import org.junit.Ignore;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class LibraryTest {
    @Test
    public void clienteCompraCocaPor120MangosHabiendoCostado10ManosResultandoUnaGanaciaDe110() {
        /* El caso uso */
        // CompraVenta cu = new CompraVenta("coca", 10, 120);
        //
        // renta := cu.ejecutar();
        //

        /* Arrange */
        Coca coca = new Coca(10.0);

        /* Act */
        Double ganancia = coca.vender(120);

        /* Assert */
        assertEquals(110.0, ganancia, 0.02);
    }

    @Test
    public void clienteCompraCocaPor120MangosHabiendoCostado20ResultandoUnaGanaciaDe100() {
        /* Arrange */
        Coca coca = new Coca(20);

        /* Act */
        Double ganancia = coca.vender(120);

        /* Assert */
        assertEquals(100.0, ganancia, 0.02);
    }

    @Test
    public void clienteCompraPapasPor200MangosHabiendoCostado5MangosResultandoUnaGanaciaDe195() {
        /* Arrange */
        Papas papa = new Papas(5);

        /* Act */
        Double ganancia = papa.vender(200);

        /* Assert */
        assertEquals(195.0, ganancia, 0.02);
    }

    @Test
    public void clienteCompraComboPapasCocaPor1000MangosHabiendoCostado5laPapa10laCocaResultandoUnaGanaciaDe985() {
        /* Arrange */
        Combo combo = new Combo(new Papas(5), new Coca(10));

        /* Act */
        Double ganancia = combo.vender(1000.0);

        /* Assert */
        assertEquals(985.0, ganancia, 0.02);

    }

    @Test
    public void clienteCompraCocaPor100MangosHabiendoCompradoPackDe6Por6ResultandoUnaGanaciaDe99() {
        /* Arrange */
        PackCoca pack = new PackCoca(6, 6);

        /* Act */
        Double ganancia = pack.unidad().vender(100.0);

        /* Assert */
        assertEquals(99.0, ganancia, 0.02);
    }

    @Test
    @Ignore
    public void clienteCompraComboDeCocaMasPapasPagandoConUnaVacaResultandoLaVacaComoGanancia() {
        /* Arrange */
        Combo combo = new Combo(new Papas(5), new Coca(10));

        /* Act */
        Double ganancia = combo.vender( null /* new Vaca() */);

        /* Assert */

        /**
         * Una primera alternativa (sencilla) sería resolver el siguiente assert.
         *
         * La ganancia es la "vaca":
         */
        assertEquals( null /* new Vaca() */ , ganancia);


        /**
         * Un problema un poco más complejo sería resolver el siguiente assert.
         *
         * La ganancia es la "vaca" menos los cosos de los productos:
         */
        assertEquals( null /* new Vaca() -  10 - 5 */ , ganancia);
    }

    @Test
    @Ignore
    public void clienteCompraUnaCocaConUnaVacaResultandoLaVacaComoGanancia() {
        /* Arrange */
        PackCoca pack = new PackCoca(8, 500);

        /* Act */
        Double ganancia = pack.unidad().vender( 0.0 /* new Vaca() */);

        /* Assert */
        /**
         * Una primera alternativa (sencilla) sería resolver el siguiente assert.
         *
         * La ganancia es la "vaca":
         */
        assertEquals( null /* new Vaca() */ , ganancia);


        /**
         * Un problema un poco más complejo sería resolver el siguiente assert.
         *
         * La ganancia es la "vaca" menos los cosos de los productos:
         */
        assertEquals( null /* new Vaca() -  (5000 / 8) */ , ganancia);
    }


}
